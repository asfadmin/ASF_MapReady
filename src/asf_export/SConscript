import os.path

Import("globalenv")
localenv = globalenv.Clone()

localenv.AppendUnique(CPPPATH = [
        "#include",
        "#src/asf",
        "#src/asf_meta",
        "#src/libasf_proj",
        "#src/libasf_raster",
        "#src/libasf_export",
        ])

localenv.ParseConfig("pkg-config --cflags --libs libgeotiff")
localenv.ParseConfig("pkg-config --cflags --libs gsl")
localenv.ParseConfig("pkg-config --cflags --libs glib-2.0")
localenv.ParseConfig("pkg-config --cflags --libs netcdf")
localenv.ParseConfig("pkg-config --cflags --libs libpng")

localenv.AppendUnique(LIBS = [
        "asf",
        "asf_meta",
        "asf_proj",
        "asf_export",
        "asf_raster",
        "asf_fft",
        ])

head_build_dir, tail_build_dir = os.path.split(Dir(".").path)

localenv.AppendUnique(LIBPATH = [
        "#" + os.path.join(head_build_dir, "asf"),
        "#" + os.path.join(head_build_dir, "asf_meta"),
        "#" + os.path.join(head_build_dir, "libasf_proj"),
        "#" + os.path.join(head_build_dir, "libasf_export"),
        "#" + os.path.join(head_build_dir, "libasf_raster"),
        "#" + os.path.join(head_build_dir, "asf_fft"),
        ])

bins = localenv.Program("asf_export", Glob("*.c"))

globalenv.Install(globalenv["inst_dirs"]["bins"], bins)

# run the unit test, and set its dependencies
test_result = localenv.UnitTest("test.semaphore", None)
localenv.Depends(test_result, [bins])
