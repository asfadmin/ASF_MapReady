import os.path

Import("env")
env = env.Clone()

env.AppendUnique(CPPPATH = [
        "#include",
        "#src/asf",
        "#src/asf_meta",
        "#src/libasf_proj",
        ])

env.ParseConfig("pkg-config --cflags --libs libgeotiff")
env.ParseConfig("pkg-config --cflags --libs gsl")
env.ParseConfig("pkg-config --cflags --libs glib-2.0")

env.AppendUnique(LIBS = ["asf",
                         "asf_meta",
                         "asf_proj",
                         ])

head_build_dir, tail_build_dir = os.path.split(Dir(".").path)

env.AppendUnique(LIBPATH = [
        "#" + os.path.join(head_build_dir, "asf"),
        "#" + os.path.join(head_build_dir, "asf_meta"),
        "#" + os.path.join(head_build_dir, "libasf_proj"),
        ])
    
bins = env.Program("accum_offset", Glob("*.c"))

mans = env.File(["accum_offset.1"])

products = {"bins": bins, "mans": mans}

# run the unit test, and set its dependencies
test_program = None
test_result = env.UnitTest("test.semaphore", test_program)
for product in products.values():
    Depends(test_result, product)

Return("products")
